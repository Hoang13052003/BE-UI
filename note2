# Tài liệu tích hợp hệ thống Chat

## 1. Tổng quan hệ thống

Hệ thống chat hỗ trợ 3 loại phòng chat:
- **PROJECT**: Phòng chat dự án cho tất cả thành viên dự án
- **SUPPORT**: Phòng chat hỗ trợ giữa user và admin/manager
- **PRIVATE**: Phòng chat riêng tư giữa người dùng

Hệ thống sử dụng kết hợp REST API và WebSocket (STOMP) để giao tiếp giữa client và server.

## 2. Cấu trúc dữ liệu

### Entity

- **ChatRoom**: Thông tin phòng chat
  - id: String
  - name: String
  - type: ChatRoomType (PROJECT, SUPPORT, PRIVATE)
  - projectId: String
  - participantIds: Set<Long>
  - createdAt: LocalDateTime
  - updatedAt: LocalDateTime
  - createdBy: Long

- **ChatMessage**: Tin nhắn
  - id: String
  - roomId: String
  - senderId: Long
  - content: String
  - sentAt: LocalDateTime
  - messageStatus: Map<Long, MessageStatus>
  - attachmentIds: List<String>
  - replyToMessageId: String
  - mentionUserIds: List<String>
  - deleted: boolean
  - edited: boolean
  - editedAt: LocalDateTime

- **ChatAttachment**: Tệp đính kèm
  - id: String
  - messageId: String
  - fileName: String
  - fileType: String
  - attachmentType: AttachmentType (IMAGE, VIDEO, AUDIO, DOCUMENT, OTHER)
  - fileUrl: String
  - thumbnailUrl: String
  - size: Long
  - width/height: Integer (cho IMAGE)
  - duration: Integer (cho VIDEO/AUDIO)
  
- **UserChatStatus**: Trạng thái online
  - id: String
  - userId: Long
  - lastSeen: LocalDateTime
  - online: boolean
  - sessionId: String

### Enum

- **ChatRoomType**: PROJECT, SUPPORT, PRIVATE
- **MessageStatus**: SENT, DELIVERED, SEEN
- **AttachmentType**: IMAGE, VIDEO, AUDIO, DOCUMENT, OTHER

## 3. REST API

### Phòng chat

- **GET /api/chat/rooms**: Lấy danh sách phòng chat của người dùng
- **GET /api/chat/rooms/paged**: Lấy danh sách phòng chat của người dùng (phân trang)
- **GET /api/chat/rooms/{id}**: Lấy thông tin phòng chat theo ID
- **POST /api/chat/rooms**: Tạo phòng chat mới
- **POST /api/chat/rooms/{roomId}/users/{userId}**: Thêm người dùng vào phòng chat
- **DELETE /api/chat/rooms/{roomId}/users/{userId}**: Xóa người dùng khỏi phòng chat

### Tin nhắn

- **GET /api/chat/messages/{roomId}**: Lấy lịch sử tin nhắn
- **GET /api/chat/messages/{roomId}/paged**: Lấy lịch sử tin nhắn (phân trang)
- **POST /api/chat/messages**: Gửi tin nhắn
- **POST /api/chat/messages/mark-read**: Đánh dấu tin nhắn đã đọc

## 4. WebSocket API (STOMP)

### Subscription Endpoints

- **/user/queue/messages**: Nhận tin nhắn mới
- **/user/queue/message-status**: Nhận cập nhật trạng thái tin nhắn
- **/user/queue/typing**: Nhận thông báo trạng thái đang gõ
- **/topic/user-status**: Nhận thông báo trạng thái người dùng

### Destination Endpoints

- **/app/chat.sendMessage**: Gửi tin nhắn
- **/app/chat.markRead**: Đánh dấu tin nhắn đã đọc
- **/app/chat.typing**: Cập nhật trạng thái đang gõ
- **/app/chat.status**: Cập nhật trạng thái online/offline

## 5. Xác thực WebSocket

WebSocket yêu cầu token JWT trong tham số kết nối:
```javascript
const socket = new SockJS('/ws?token=' + jwtToken);
```

## 6. Quy trình kết nối

1. Người dùng đăng nhập và lấy JWT token
2. Kết nối WebSocket với token
3. Subscribe vào các endpoints cần thiết
4. Gửi/nhận tin nhắn và cập nhật trạng thái

## 7. Định dạng dữ liệu

### Tạo phòng chat
```json
{
  "name": "Tên phòng chat",
  "type": "PRIVATE", 
  "projectId": "proj123", 
  "participantIds": [1, 2]
}
```

### Gửi tin nhắn
```json
{
  "roomId": "room123",
  "content": "Nội dung tin nhắn",
  "attachmentIds": ["att1", "att2"],
  "replyToMessageId": "msg123",
  "mentionUserIds": ["1", "2"]
}
```

### Đánh dấu đã đọc
```json
{
  "roomId": "room123",
  "messageIds": ["msg1", "msg2"]
}
```

### Cập nhật trạng thái typing
```json
{
  "roomId": "room123",
  "typing": true
}
```

### Cập nhật trạng thái online
```json
{
  "online": true,
  "lastSeen": "2023-07-01T10:15:30"
}
```
