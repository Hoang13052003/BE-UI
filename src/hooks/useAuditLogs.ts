// src/hooks/useAuditLogs.ts

import { useState, useEffect, useCallback, useRef } from 'react';
import auditLogService, { FilterParams } from '../services/auditLogService';
import { AuditLog, AuditStats, Page, AuditLogSeverity } from '../types/auditLog.types';

// Import c√°c th∆∞ vi·ªán STOMP
import { Client, IMessage } from '@stomp/stompjs';
import SockJS from 'sockjs-client';

/**
 * Custom Hook ƒë·ªÉ qu·∫£n l√Ω to√†n b·ªô state v√† logic c·ªßa trang Audit Log,
 * bao g·ªìm c·∫£ vi·ªác t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu v√† c·∫≠p nh·∫≠t real-time qua WebSocket.
 */
export const useAuditLogs = () => {
  // === STATE CHO D·ªÆ LI·ªÜU ===
  const [logsPage, setLogsPage] = useState<Page<AuditLog> | null>(null);
  const [stats, setStats] = useState<AuditStats | null>(null);
  
  // === STATE CHO UI ===
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [isConnected, setIsConnected] = useState<boolean>(false); // State cho tr·∫°ng th√°i k·∫øt n·ªëi WS

  // useRef ƒë·ªÉ gi·ªØ instance c·ªßa stompClient kh√¥ng b·ªã t·∫°o l·∫°i m·ªói l·∫ßn render
  const stompClientRef = useRef<Client | null>(null);
  // === C√ÅC H√ÄM G·ªåI API (KH√îNG ƒê·ªîI) ===
  /**
   * T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu cho dashboard.
   * S·ª≠ d·ª•ng useCallback ƒë·ªÉ tr√°nh vi·ªác h√†m n√†y ƒë∆∞·ª£c t·∫°o l·∫°i m·ªôt c√°ch kh√¥ng c·∫ßn thi·∫øt.
   */
  const fetchInitialData = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const { logs, stats } = await auditLogService.getDashboardInitialData();
      setLogsPage(logs);
      setStats(stats);
    } catch (err: any) {
      console.error("Failed to fetch initial data:", err);
      setError(err.message || "Could not load dashboard data.");
    } finally {
      setLoading(false);
    }
  }, []);

  /**
   * L·∫•y d·ªØ li·ªáu log d·ª±a tr√™n c√°c b·ªô l·ªçc v√† ph√¢n trang.
   */
  const fetchFilteredLogs = useCallback(async (params: FilterParams) => {
    setLoading(true);
    setError(null);
    try {
      const response = await auditLogService.getFilteredLogs(params);
      setLogsPage(response.data);
    } catch (err: any) {
      console.error("Failed to fetch filtered logs:", err);
      setError(err.message || "Could not apply filters.");
    } finally {
      setLoading(false);
    }
  }, []);
  // === LOGIC T·∫¢I D·ªÆ LI·ªÜU BAN ƒê·∫¶U (KH√îNG ƒê·ªîI) ===
  // useEffect ƒë·ªÉ g·ªçi h√†m t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu m·ªôt l·∫ßn khi hook ƒë∆∞·ª£c s·ª≠ d·ª•ng l·∫ßn ƒë·∫ßu.
  useEffect(() => {
    fetchInitialData();
  }, [fetchInitialData]);

  // ==========================================================
  // M·ªöI: useEffect ƒê·ªÇ QU·∫¢N L√ù V√íNG ƒê·ªúI K·∫æT N·ªêI WEBSOCKET
  // ==========================================================
  useEffect(() => {
    // Ch·ªâ thi·∫øt l·∫≠p k·∫øt n·ªëi n·∫øu ch∆∞a c√≥
    if (!stompClientRef.current) {
      // L·∫•y JWT t·ª´ localStorage
      const token = localStorage.getItem("token");
      if (!token) {
        console.error("No token found, WebSocket connection aborted.");
        return;
      }
      
      // T·∫°o m·ªôt stomp client m·ªõi
      const client = new Client({
        // D√πng SockJS l√†m transport fallback
        webSocketFactory: () => new SockJS(`${import.meta.env.VITE_API_URL}/ws`),
        
        // G·ª≠i token trong header ƒë·ªÉ backend x√°c th·ª±c
        connectHeaders: {
          Authorization: `Bearer ${token}`,
        },
        
        // B·∫≠t debug ƒë·ªÉ xem log k·∫øt n·ªëi trong console
        debug: (str) => {
          console.log(new Date(), str);
        },
        
        // T·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i sau 5 gi√¢y n·∫øu m·∫•t k·∫øt n·ªëi
        reconnectDelay: 5000,
      });

      // X·ª≠ l√Ω khi k·∫øt n·ªëi th√†nh c√¥ng
      client.onConnect = (frame) => {
        setIsConnected(true);
        console.log('‚úÖ WebSocket Connected:', frame);

        // ƒêƒÉng k√Ω (subscribe) v√†o k√™nh ch√≠nh ƒë·ªÉ nh·∫≠n log m·ªõi
        client.subscribe('/topic/audit-logs', (message: IMessage) => {
          try {
            const newLog: AuditLog = JSON.parse(message.body);
            
            // Th√™m log m·ªõi v√†o ƒë·∫ßu danh s√°ch
            setLogsPage(currentPage => {
              if (!currentPage) return null; // Tr∆∞·ªùng h·ª£p ch∆∞a c√≥ d·ªØ li·ªáu
              
              const newContent = [newLog, ...currentPage.content];
              // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng log hi·ªÉn th·ªã ƒë·ªÉ tr√°nh qu√° t·∫£i UI
              if (newContent.length > 100) {
                newContent.pop();
              }
              
              return {
                ...currentPage,
                content: newContent,
                totalElements: currentPage.totalElements + 1,
              };
            });

            // C·∫≠p nh·∫≠t th·ªëng k√™ (c√°ch ƒë∆°n gi·∫£n)
            setStats(currentStats => {
                if (!currentStats) return null;
                const newTotal = (currentStats.totalLogs24h || 0) + 1;
                let newCritical = currentStats.criticalLogs24h || 0;
                let newError = currentStats.errorLogs24h || 0;
                let newWarning = currentStats.warningLogs24h || 0;

                if(newLog.severity === AuditLogSeverity.CRITICAL) newCritical++;
                if(newLog.severity === AuditLogSeverity.ERROR) newError++;
                if(newLog.severity === AuditLogSeverity.WARNING) newWarning++;
                
                return {...currentStats, totalLogs24h: newTotal, criticalLogs24h: newCritical, errorLogs24h: newError, warningLogs24h: newWarning };
            });

          } catch (e) {
            console.error('Error parsing WebSocket message:', e);
          }
        });

        // ƒêƒÉng k√Ω v√†o k√™nh c·∫£nh b√°o
        client.subscribe('/topic/admin-alerts', (message: IMessage) => {
          const alert: AuditLog = JSON.parse(message.body);
          // TODO: Hi·ªÉn th·ªã m·ªôt toast notification, v√≠ d·ª• d√πng react-toastify
          // toast.error(`CRITICAL ACTION: ${alert.details}`);
          console.error(`üö® CRITICAL ACTION: ${alert.details}`);
        });
      };

      // X·ª≠ l√Ω khi m·∫•t k·∫øt n·ªëi
      client.onDisconnect = () => {
        setIsConnected(false);
        console.log('‚ùå WebSocket Disconnected');
      };

      // X·ª≠ l√Ω l·ªói STOMP
      client.onStompError = (frame) => {
        console.error('Broker reported error: ' + frame.headers['message']);
        console.error('Additional details: ' + frame.body);
      };

      // K√≠ch ho·∫°t client v√† l∆∞u v√†o ref
      client.activate();
      stompClientRef.current = client;
    }

    // H√†m d·ªçn d·∫πp: s·∫Ω ƒë∆∞·ª£c g·ªçi khi component unmount
    return () => {
      if (stompClientRef.current?.active) {
        console.log('Deactivating WebSocket client...');
        stompClientRef.current.deactivate();
        stompClientRef.current = null;
      }
    };
  }, []); // [] ƒë·∫£m b·∫£o effect n√†y ch·ªâ ch·∫°y m·ªôt l·∫ßn duy nh·∫•t trong v√≤ng ƒë·ªùi c·ªßa hook

  // Tr·∫£ v·ªÅ t·∫•t c·∫£ state v√† c√°c h√†m c·∫ßn thi·∫øt cho component UI.
  return {
    logs: logsPage?.content ?? [], // Lu√¥n tr·∫£ v·ªÅ m·ªôt m·∫£ng ƒë·ªÉ tr√°nh l·ªói
    pagination: {
      totalPages: logsPage?.totalPages ?? 0,
      totalElements: logsPage?.totalElements ?? 0,
      currentPage: logsPage?.number ?? 0,
      size: logsPage?.size ?? 50,
    },
    stats,
    loading,
    error,
    isConnected, // Tr·∫£ v·ªÅ tr·∫°ng th√°i k·∫øt n·ªëi ƒë·ªÉ UI c√≥ th·ªÉ hi·ªÉn th·ªã
    fetchFilteredLogs, // Cung c·∫•p h√†m n√†y ƒë·ªÉ UI c√≥ th·ªÉ g·ªçi khi ng∆∞·ªùi d√πng l·ªçc
    refetch: fetchInitialData, // Cung c·∫•p h√†m ƒë·ªÉ t·∫£i l·∫°i to√†n b·ªô d·ªØ li·ªáu
  };
};