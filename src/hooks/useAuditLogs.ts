// src/hooks/useAuditLogs.ts

import { useState, useEffect, useCallback, useRef } from 'react';
import auditLogService, { FilterParams } from '../services/auditLogService';
import { AuditLog, RealtimeStatistics, Page, FilterOptions } from '../types/auditLog.types';

// Import c√°c ki·ªÉu d·ªØ li·ªáu t·ª´ Ant Design ƒë·ªÉ g√µ ki·ªÉu cho callback
import { TablePaginationConfig } from 'antd/es/table';
import { SorterResult, FilterValue } from 'antd/es/table/interface';

// Import WebSocket
import { Client, IMessage } from '@stomp/stompjs';
import SockJS from 'sockjs-client';

/**
 * Custom Hook ƒë·ªÉ qu·∫£n l√Ω to√†n b·ªô state v√† logic c·ªßa trang Audit Log.
 * H·ªó tr·ª£ t·∫£i d·ªØ li·ªáu, ph√¢n trang, l·ªçc, s·∫Øp x·∫øp, v√† c·∫≠p nh·∫≠t real-time.
 */
export const useAuditLogs = () => {
  // State cho d·ªØ li·ªáu
  const [logsPage, setLogsPage] = useState<Page<AuditLog> | null>(null);
  const [stats, setStats] = useState<RealtimeStatistics | null>(null);
  const [filterOptions, setFilterOptions] = useState<FilterOptions | null>(null);
  
  // State cho UI
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [isConnected, setIsConnected] = useState<boolean>(false);

  // State ƒë·ªÉ l∆∞u c√°c tham s·ªë truy v·∫•n hi·ªán t·∫°i (bao g·ªìm c·∫£ ph√¢n trang, l·ªçc, s·∫Øp x·∫øp)
  const [queryParams, setQueryParams] = useState<FilterParams>({
    page: 0,
    size: 10,
    sort: 'timestamp,desc', // S·∫Øp x·∫øp m·∫∑c ƒë·ªãnh theo timestamp gi·∫£m d·∫ßn
  });

  const stompClientRef = useRef<Client | null>(null);  /**
   * H√†m fetch d·ªØ li·ªáu ch√≠nh, ƒë∆∞·ª£c g·ªçi m·ªói khi queryParams thay ƒë·ªïi.
   */
  const fetchLogs = useCallback(async (params: FilterParams) => {
    setLoading(true);
    setError(null);
    try {
      // Ch√∫ng ta s·∫Ω d√πng endpoint /filtered v√¨ n√≥ tr·∫£ v·ªÅ Page<DTO> ƒë∆°n gi·∫£n h∆°n
      const response = await auditLogService.getFilteredRealtimeLogs(params);
      setLogsPage(response.data);
    } catch (err: any) {
      console.error("Failed to fetch logs:", err);
      setError(err.message || "Could not load audit log data.");
    } finally {
      setLoading(false);
    }
  }, []);

  /**
   * useEffect ch√≠nh ƒë·ªÉ theo d√µi s·ª± thay ƒë·ªïi c·ªßa queryParams v√† g·ªçi l·∫°i API.
   */
  useEffect(() => {
    fetchLogs(queryParams);
  }, [queryParams, fetchLogs]);

  /**
   * T·∫£i c√°c d·ªØ li·ªáu kh√¥ng thay ƒë·ªïi (stats, filter options) m·ªôt l·∫ßn duy nh·∫•t.
   */
  useEffect(() => {
    const fetchStaticData = async () => {
      try {
        const { stats: initialStats, filterOptions: initialOptions } = 
          await auditLogService.getRealtimeDashboardInitialData();
        setStats(initialStats);
        setFilterOptions(initialOptions);
      } catch (err: any) {
        // Ch·ªâ ghi log l·ªói, kh√¥ng hi·ªÉn th·ªã l·ªói l·ªõn cho ng∆∞·ªùi d√πng
        console.error("Failed to load static dashboard data:", err);
      }
    };
    fetchStaticData();
  }, []);
  // useEffect cho WebSocket (logic kh√¥ng ƒë·ªïi, ch·ªâ c·∫≠p nh·∫≠t state cho ƒë√∫ng)
  useEffect(() => {
    // Ch·ªâ thi·∫øt l·∫≠p k·∫øt n·ªëi n·∫øu ch∆∞a c√≥
    if (!stompClientRef.current) {
      // L·∫•y JWT t·ª´ localStorage
      const token = localStorage.getItem("token");
      if (!token) {
        console.error("No token found, WebSocket connection aborted.");
        return;
      }
      
      // T·∫°o m·ªôt stomp client m·ªõi
      const client = new Client({
        // D√πng SockJS l√†m transport fallback
        webSocketFactory: () => new SockJS(`${import.meta.env.VITE_API_URL}/ws`),
        
        // G·ª≠i token trong header ƒë·ªÉ backend x√°c th·ª±c
        connectHeaders: {
          Authorization: `Bearer ${token}`,
        },
        
        // B·∫≠t debug ƒë·ªÉ xem log k·∫øt n·ªëi trong console
        debug: (str) => {
          console.log(new Date(), str);
        },
        
        // T·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i sau 5 gi√¢y n·∫øu m·∫•t k·∫øt n·ªëi
        reconnectDelay: 5000,
      });

      // X·ª≠ l√Ω khi k·∫øt n·ªëi th√†nh c√¥ng
      client.onConnect = (frame) => {
        setIsConnected(true);
        console.log('‚úÖ WebSocket Connected:', frame);

        // ƒêƒÉng k√Ω (subscribe) v√†o k√™nh ch√≠nh ƒë·ªÉ nh·∫≠n log m·ªõi
        client.subscribe('/topic/audit-logs', (message: IMessage) => {
          try {
            const newLog: AuditLog = JSON.parse(message.body);
            
            // Th√™m log m·ªõi v√†o ƒë·∫ßu danh s√°ch
            setLogsPage(currentPage => {
              if (!currentPage) return null; // Tr∆∞·ªùng h·ª£p ch∆∞a c√≥ d·ªØ li·ªáu
              
              const newContent = [newLog, ...currentPage.content];
              // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng log hi·ªÉn th·ªã ƒë·ªÉ tr√°nh qu√° t·∫£i UI
              if (newContent.length > 100) {
                newContent.pop();
              }
              
              return {
                ...currentPage,
                content: newContent,
                totalElements: currentPage.totalElements + 1,
              };
            });

            // C·∫≠p nh·∫≠t th·ªëng k√™ (c√°ch ƒë∆°n gi·∫£n)
            setStats((currentStats: RealtimeStatistics | null) => {
                if (!currentStats) return null;
                const newTotal = (currentStats.total_logs || 0) + 1;
                const newSeverityBreakdown = { ...currentStats.severity_breakdown };
                
                // C·∫≠p nh·∫≠t severity breakdown
                if (newLog.severity) {
                  const severityKey = newLog.severity.toUpperCase();
                  newSeverityBreakdown[severityKey] = (newSeverityBreakdown[severityKey] || 0) + 1;
                }
                
                // C·∫≠p nh·∫≠t success/failure counts
                const newSuccessful = newLog.success 
                  ? (currentStats.successful_actions || 0) + 1 
                  : currentStats.successful_actions || 0;
                const newFailed = !newLog.success 
                  ? (currentStats.failed_actions || 0) + 1 
                  : currentStats.failed_actions || 0;
                
                return {
                  ...currentStats, 
                  total_logs: newTotal,
                  successful_actions: newSuccessful,
                  failed_actions: newFailed,
                  success_rate: newTotal > 0 ? (newSuccessful / newTotal) * 100 : 0,
                  severity_breakdown: newSeverityBreakdown
                };
            });

          } catch (e) {
            console.error('Error parsing WebSocket message:', e);
          }
        });

        // ƒêƒÉng k√Ω v√†o k√™nh c·∫£nh b√°o
        client.subscribe('/topic/admin-alerts', (message: IMessage) => {
          const alert: AuditLog = JSON.parse(message.body);
          // TODO: Hi·ªÉn th·ªã m·ªôt toast notification, v√≠ d·ª• d√πng react-toastify
          // toast.error(`CRITICAL ACTION: ${alert.details}`);
          console.error(`üö® CRITICAL ACTION: ${alert.details}`);
        });
      };

      // X·ª≠ l√Ω khi m·∫•t k·∫øt n·ªëi
      client.onDisconnect = () => {
        setIsConnected(false);
        console.log('‚ùå WebSocket Disconnected');
      };

      // X·ª≠ l√Ω l·ªói STOMP
      client.onStompError = (frame) => {
        console.error('Broker reported error: ' + frame.headers['message']);
        console.error('Additional details: ' + frame.body);
      };

      // K√≠ch ho·∫°t client v√† l∆∞u v√†o ref
      client.activate();
      stompClientRef.current = client;
    }

    // H√†m d·ªçn d·∫πp: s·∫Ω ƒë∆∞·ª£c g·ªçi khi component unmount
    return () => {
      if (stompClientRef.current?.active) {
        console.log('Deactivating WebSocket client...');
        stompClientRef.current.deactivate();
        stompClientRef.current = null;
      }
    };
  }, []); // [] ƒë·∫£m b·∫£o effect n√†y ch·ªâ ch·∫°y m·ªôt l·∫ßn duy nh·∫•t trong v√≤ng ƒë·ªùi c·ªßa hook

  /**
   * H√†m callback ch√≠nh ƒë∆∞·ª£c truy·ªÅn cho prop `onChange` c·ªßa Ant Design Table.
   * X·ª≠ l√Ω c·∫£ 3 s·ª± ki·ªán: ph√¢n trang, l·ªçc, v√† s·∫Øp x·∫øp.
   */
  const handleTableChange = (
    pagination: TablePaginationConfig,
    filters: Record<string, FilterValue | null>,
    sorter: SorterResult<AuditLog> | SorterResult<AuditLog>[]
  ) => {
    // X√¢y d·ª±ng c√°c tham s·ªë truy v·∫•n m·ªõi
    const newParams: FilterParams = {
      page: (pagination.current ?? 1) - 1, // Antd page b·∫Øt ƒë·∫ßu t·ª´ 1
      size: pagination.pageSize ?? 10,
    };

    // X·ª≠ l√Ω s·∫Øp x·∫øp
    const singleSorter = Array.isArray(sorter) ? sorter[0] : sorter;
    if (singleSorter.field && singleSorter.order) {
      const direction = singleSorter.order === 'ascend' ? 'asc' : 'desc';
      newParams.sort = `${String(singleSorter.field)},${direction}`;
    } else {
      newParams.sort = 'timestamp,desc'; // M·∫∑c ƒë·ªãnh
    }    // X·ª≠ l√Ω l·ªçc
    Object.keys(filters).forEach(key => {
      const filterValue = filters[key];
      if (filterValue && filterValue.length > 0) {
        // Antd tr·∫£ v·ªÅ m·ªôt m·∫£ng, ch√∫ng ta l·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
        // API c·ªßa b·∫°n c√≥ th·ªÉ c·∫ßn x·ª≠ l√Ω m·∫£ng (v√≠ d·ª•: /api?severity=INFO&severity=ERROR)
        (newParams as any)[key] = String(filterValue[0]);
      }
    });
    
    // C·∫≠p nh·∫≠t state queryParams, ƒëi·ªÅu n√†y s·∫Ω trigger useEffect ƒë·ªÉ g·ªçi l·∫°i API
    setQueryParams(newParams);
  };
  return {
    logs: logsPage?.content ?? [],
    // C·∫•u h√¨nh pagination cho Ant Design Table
    paginationConfig: {
      current: (logsPage?.number ?? 0) + 1,
      pageSize: logsPage?.size ?? 10,
      total: logsPage?.totalElements ?? 0,
      showSizeChanger: true,
      showTotal: (total: number, range: [number, number]) => `${range[0]}-${range[1]} of ${total} items`,
    },
    stats,
    filterOptions,
    loading,
    error,
    isConnected,
    handleTableChange, // Tr·∫£ v·ªÅ h√†m callback n√†y cho component
  };
};