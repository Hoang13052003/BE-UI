import React from 'react';
import { TreeNodeDto } from '../../../types/Attachment'; // ƒêi·ªÅu ch·ªânh path n·∫øu c·∫ßn

// H√†m helper ƒë·ªÉ ƒë·ªãnh d·∫°ng ng√†y gi·ªù (v√≠ d·ª•)
const formatDate = (dateString: string | null): string => {
  if (!dateString) return '';
  try {
    const date = new Date(dateString);
    return date.toLocaleString(); // Ho·∫∑c ƒë·ªãnh d·∫°ng kh√°c b·∫°n mu·ªën
  } catch (error) {
    console.error("Error formatting date:", dateString, error);
    return 'Invalid date';
  }
};

interface FileRowProps {
  node: TreeNodeDto;
  onNodeClick: (node: TreeNodeDto) => void;
}

const FileRow: React.FC<FileRowProps> = ({ node, onNodeClick }) => {
  const getIcon = () => {
    if (node.type === 'directory') return 'üìÅ'; // Thay th·∫ø b·∫±ng icon SVG/font icon
    // Th√™m logic ƒë·ªÉ ch·ªçn icon d·ª±a tr√™n node.fileType n·∫øu mu·ªën
    return 'üìÑ'; // Icon file m·∫∑c ƒë·ªãnh
  };

  const formatSize = (sizeInBytes: number | null): string => {
    if (sizeInBytes === null || sizeInBytes === undefined) return '';
    if (sizeInBytes / (1024 * 1024) < 0.01) {
      if (sizeInBytes / 1024 < 0.1 && sizeInBytes > 0) return '< 0.1 KB';
      return (sizeInBytes / 1024).toFixed(1) + ' KB';
    }
    return (sizeInBytes / (1024 * 1024)).toFixed(2) + ' MB';
  };

  return (
    <li
      onClick={() => onNodeClick(node)}
      style={{
        cursor: 'pointer',
        padding: '10px 8px', // TƒÉng padding m·ªôt ch√∫t
        borderBottom: '1px solid #e1e4e8', // M√†u border gi·ªëng GitHub
        display: 'flex',
        alignItems: 'center',
        fontSize: '14px', // Font size ph·ªï bi·∫øn
      }}
      title={node.type === 'file' ? `View ${node.name}` : `Open ${node.name}`}
      onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#f6f8fa'} // M√†u hover gi·ªëng GitHub
      onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}
    >
      <span style={{ marginRight: '12px', width: '20px', textAlign: 'center' }}> {/* CƒÉn ch·ªânh icon */}
        {getIcon()}
      </span>
      <span style={{ flexGrow: 1, color: '#0366d6' /* M√†u link GitHub */ }}>
        {node.name}
      </span>
      {node.type === 'file' && (
        <>
          <span style={{ width: '100px', textAlign: 'right', marginRight: '20px', color: '#586069', fontSize: '12px' }}>
            {formatSize(node.size)}
          </span>
          <span style={{ width: '150px', color: '#586069', fontSize: '12px', whiteSpace: 'nowrap', marginRight: '10px', overflow: 'hidden', textOverflow: 'ellipsis' }}>
            {node.fileType || 'unknown'}
          </span>
          <span style={{ width: '170px', color: '#586069', fontSize: '12px', whiteSpace: 'nowrap', textAlign: 'right' }}>
            {node.lastModified ? formatDate(node.lastModified) : ''}
          </span>
        </>
      )}
      {/* GitHub th∆∞·ªùng c√≥ c·ªôt cho commit message cu·ªëi c√πng ·ªü ƒë√¢y */}
    </li>
  );
};

export default FileRow;